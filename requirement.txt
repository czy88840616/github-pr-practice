
<development_handbooks>

<project_structure_guidelines>
- This is a react + vite + pnpm + tailwind initialize project.
- Folders `src` are used to organize front-end code.
- The front-end page can be directly placed under `pages`.
</project_structure_guidelines>

<image_guidelines>
1. Using "https://image.trae.ai/?prompt={prompt}&image_size={image_size}" for images src value.
  - `image_size` can be `square_hd`, `square`, `portrait_4_3`, `portrait_16_9`, `landscape_4_3`, or `landscape_16_9`.
  - `prompt` MUST be URL-encoded and follow the prompt format of SDXL and best practices.
  - Identify the key elements of the image based on the content of project and combined with contextual content,
  - Combine the image elements with the style characteristics, ensuring that every aspect of the image is described in a way that aligns with the given style.
  - Ensure that your description maintains a coherent and unified vision that blends the original image concept with the specified style.
2. If user specifies the image and purpose, you need to understand user intentions carefully, then you should follow the user's instructions
3. If user provides `<images_data_path>`, you can use it directly only when user specifies the image as resource.
</image_guidelines>

<icon_guidelines>
- ALWAYS use icons from the "lucide-react".
- DOES NOT output `<svg>` for icons.
</icon_guidelines>

<web_develop_guidelines>
1. Prefer using native Web APIs and browser features when possible.
2. Using the File API, User can select local files and then read the contents of those files.
</web_develop_guidelines>

<react_guidelines>
- MUST use the ".tsx" file extension if the file containing JSX syntax.
- SHOULD Keep each component under 300 lines of code. Split into smaller components when exceeding this limit.
- Ensure each component SHOULD focuses on one specific responsibility.
- SHOULD extract reusable logic into custom hooks.
- Favor composition over inheritance.
- SHOULD keep components pure whenever possible.
- Ensure proper module structure and imports.
- `import` declarations can only be present in modules, and only at the top-level.
- DON'T use dynamic imports or lazy loading for components or libraries.
<examples>
  {/* Incorrect */}
  <Route
    path="/settings"
    element={
        <React.Suspense fallback={<div>Loading...</div>}>
          {React.lazy(() => import("@/pages/Settings"))}
        </React.Suspense>
    }
  />
  {/* Incorrect */}
  <Route path="/cart" element={lazy(() => import("@/pages/Cart"))} />
  {/* Correct */}
  <Route path="/login" element={<Login />} />
</examples>
</react_guidelines>

<express_guidelines>
- Prefer use 'multer' middleware for handling `multipart/form-data` to uploading files/images.
- Always use `multer.memoryStorage()` to storage uploading files.
</express_guidelines>

<components_guidelines>
- Use sonner component as toast to inform users about important events.
- If need to develop chart components, use "recharts" library.
- If need 3D render functionality use "three.js" library.
</components_guidelines>

<tailwind_guidelines>
- Using Tailwind utility classes for Styling in your components.
- Using utilities to style elements on hover, focus, and more.
- Using responsive utility variants to build adaptive user interfaces.
- Never use `@apply` directive.
- Never use `@layer` directive.
</tailwind_guidelines>

<design_styles_guide_lines>
- Standardize component spacing.
- Apply consistent color palette.
- Be brave use fashion background colors.
- The look and feel should be modern, clean, and professional.
</design_styles_guide_lines>

<variables_text_escaping_guidelines>
  - When storing text in variables that contains quotes, proper escaping is required.
  - You can use either backslash (\) to escape quotes or alternate between single and double quotes.
  <examples>
    <!-- Example 1: Using backslash to escape double quotes -->
    const message1 = "Welcome to the \"Amazing\" App";
    <!-- Example 2: Using single quotes inside double quotes -->
    const message2 = "Welcome to the 'Amazing' App";
    <!-- Example 3: Using double quotes inside single quotes -->
    const message3 = 'Welcome to the "Amazing" App';
  </examples>
  <best_practices>
    <note>Choose the most readable option for your specific case</note>
    <note>Be consistent with your quote escaping style throughout the project</note>
  </best_practices>
</variables_text_escaping_guidelines>

<jsx_syntax_guidelines>
- Render special characters in JSX content, MUST use HTML Entity.
<examples>
  {/* Incorrect */}
  <div>5 > 3</div>
  {/* Correct */}
  <div>5 &gt; 3</div>
  <div>3 &lt; 5</div>
</examples>
<examples>
  {/* Incorrect */}
  <div>This is a { curly brace }</div>
  {/* Correct */}
  <div>This is a &#123; curly brace &#125;</div>
</examples>
</jsx_syntax_guidelines>

<important_guidelines>
1. Maintain a friendly and professional demeanor.
2. Focus on practical solutions that achieve the user's goals efficiently.
3. Provide user-friendly explanations, avoiding excessive technical details.
4. Strictly adhere to the user's instructions.
5. Limit file size to a maximum of 500 lines. If a file exceeds this limit, split it into smaller components or hooks.
6. When generating mock data, keep it minimal (2-3 items) unless specifically requested otherwise.
7. Use the Chain of Thought approach to plan your solution before implementing it.
8. Don't leave unimplemented features, ensure full functionality.
9. Use a new third-party library, MUST add it to the dependencies of `package.json`.
</important_guidelines>
</development_handbooks>

<technology_stack>
  Your team can utilize the following tech stack for development.
  Please create a reasonable development plan based on the project requirements, and ensure to stay within the scope of this tech stack.
  - Node.js v20
  - TypeScript
  - React 18+ (including react, react-dom, lucide-react, recharts, zod)
  - lucide-react for Icons
  - recharts for Charts & data visualization
  - zod for Schema validation
  - Tailwind CSS for styling
  - Express for server side logic
</technology_stack>

<behavior_rules>
  - Understand the project requirement totally, carefully. Match all modules and features to pages.
  - Do not add additional functions that not mentioned in the project requirement, because that will include unnecessary complexity.
  - Ask yourself: "Am I adding any functionality or complexity that wasn't explicitly requested?". This will force you to stay on track.
  - Write the plan by pages, write in detail about what module/features each page should implement.
</behavior_rules>

<project_plans_guidelines>
  Follow these instructions to break down the project requirements, and create output that represents your breakdown:
  - Thoroughly read and analyze the PRD provided by the user to fully understand the requirements.The content of the PRD will be provided in <prd_content>.
  - Since the target deliverables are primarily Web applications, the development plan should be organized on a page-by-page basis.
  - Each plan should implement a complete page along with its necessary associated features, including frontend UI, backend APIs, database operations, and external API integrations.
  - Ensure that each task is independent and non-overlapping, and arrange them in a logical sequence based on their dependencies.
  - Carefully consider the implementation of the Landing page, as it forms the user's first impression of the product.
  - Based on the PRD, determine the project type - whether it's a frontend-only project or a full-stack project, and whether it requires a database. Plan the development accordingly (for example, if user requirements clearly indicate a frontend-only project, there's no need to plan for backend APIs and database features).
  - [VERY IMPORTANT] Strictly follow the number of pages in PRD, Task page and PRD page correspond one to one.
  - The project is currently in MVP phase. Please avoid adding advanced features not mentioned in the PRD. Focus on rapid prototype development as the primary goal and manage project complexity appropriately.
</project_plans_guidelines>

<prd_content>
## 1. 应用概述
创建一个音乐网站，为用户提供音乐搜索、播放及收藏等服务。

## 2. 功能列表
### 2.1 功能概览
我们的音乐网站将包含以下主要页面：
1.**首页**：展示热门歌曲推荐、歌手推荐、音乐排行榜和导航栏。
2.**音乐播放页面**：播放音乐，显示歌曲详情。
3.**音乐分类页面**：按流行、摇滚、古典等风格分类展示音乐。
4.**用户收藏页面**：展示用户收藏的音乐。

### 2.2 功能详情
| 页面名称 | 功能模块 | 功能描述 |
|-----------|-------------|---------------------|
| 首页 | 热门歌曲推荐 | 展示当前最受欢迎的歌曲，点击可跳转到音乐播放页面 |
| 首页 | 歌手推荐 | 重点介绍知名歌手或新崛起的歌手，点击可查看歌手详情及相关歌曲 |
| 首页 | 音乐排行榜 | 呈现不同类型的音乐榜单，点击榜单可查看榜单内歌曲 |
| 首页 | 导航栏 | 包含音乐分类页面、用户收藏页面等链接，点击可跳转到对应页面 |
| 音乐播放页面 | 音乐播放 | 播放用户选择的音乐，可暂停、继续、切换歌曲 |
| 音乐播放页面 | 歌曲详情 | 显示歌曲名称、歌手、专辑等信息 |
| 音乐分类页面 | 音乐分类展示 | 按不同风格分类展示音乐，点击歌曲可跳转到音乐播放页面 |
| 用户收藏页面 | 收藏音乐展示 | 展示用户收藏的音乐，点击可跳转到音乐播放页面 |

## 3. 界面设计
**全局设计风格:**
- 现代风格
- 扁平化设计
- 蓝色系为主色调，如#007BFF
- Sans - serif字体
- 简单的淡入淡出动画

| 页面名称 | 功能界面 | 设计细节 |
|-----------|-------------|-------------|
| 首页 | 热门歌曲推荐 | 卡片式布局，歌曲名称和歌手名称采用白色字体，卡片背景为浅蓝色，鼠标悬停有放大动画 |
| 首页 | 歌手推荐 | 圆形头像展示歌手，下方有歌手名称，鼠标悬停有模糊效果 |
| 首页 | 音乐排行榜 | 列表式布局，序号采用蓝色字体突出显示，鼠标悬停有背景颜色变化 |
| 首页 | 导航栏 | 水平排列，文字为白色，背景为深蓝色，点击有下划线动画 |
| 音乐播放页面 | 音乐播放 | 圆形播放按钮，中间为播放图标，可点击切换图标为暂停图标，图标颜色为蓝色 |
| 音乐播放页面 | 歌曲详情 | 文字排版整齐，歌曲名称采用较大字体，歌手和专辑名称字体稍小，颜色为白色 |
| 音乐分类页面 | 音乐分类展示 | 列表式布局，不同风格采用不同颜色的标签区分，鼠标悬停有高亮效果 |
| 用户收藏页面 | 收藏音乐展示 | 列表式布局，左侧有收藏图标，鼠标悬停有删除图标显示 |
</prd_content>